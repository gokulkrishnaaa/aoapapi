// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Gender {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  Candidate Candidate[]
}

model SocialStatus {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  Candidate Candidate[]
}

model InfoSource {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  Candidate Candidate[]
}

model State {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  code        Int           @default(0)
  districts   District[]
  createdAt   DateTime      @default(now())
  Candidate   Candidate[]
  PlusTwoInfo PlusTwoInfo[]
}

model District {
  id        Int         @id @default(autoincrement())
  name      String
  state     State       @relation(fields: [stateId], references: [id])
  stateId   Int
  cities    City[]
  createdAt DateTime    @default(now())
  Candidate Candidate[]

  @@unique([stateId, name], name: "StateDistrictNameUnique")
}

model City {
  id         Int         @id @default(autoincrement())
  name       String
  code       Int         @default(0)
  district   District    @relation(fields: [districtId], references: [id])
  districtId Int
  createdAt  DateTime    @default(now())
  Candidate  Candidate[]
  ExamCity   ExamCity[]

  @@unique([districtId, name], name: "DistrictCityNameUnique")
}

model CountryCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
}

model Onboarding {
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @unique
  status      Boolean   @default(false)
  current     Int       @default(1)
}

model Candidate {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  fullname         String?
  dob              DateTime?
  gender           Gender?            @relation(fields: [genderId], references: [id])
  genderId         Int?
  socialstatus     SocialStatus?      @relation(fields: [socialstatusId], references: [id])
  socialstatusId   Int?
  email            String?            @unique
  phone            String?            @unique
  phonecode        String?
  infosource       InfoSource?        @relation(fields: [infosourceId], references: [id])
  infosourceId     Int?
  aadhaarnumber    String?            @unique
  state            State?             @relation(fields: [stateId], references: [id])
  stateId          Int?
  district         District?          @relation(fields: [districtId], references: [id])
  districtId       Int?
  city             City?              @relation(fields: [cityId], references: [id])
  cityId           Int?
  otherCity        String?
  address1         String?
  address2         String?
  photoid          String?
  signid           String?
  emailverified    DateTime?
  phoneverified    DateTime?
  aadhaarverified  DateTime?
  Onboarding       Onboarding?
  ParentInfo       ParentInfo?
  PlusTwoInfo      PlusTwoInfo?
  ExamApplication  ExamApplication[]
  EntrancePayments EntrancePayments[]
  Utm              Utm?
  JEEApplication   JEEApplication[]
  JEEPayments      JEEPayments[]

  isOMR                     Boolean                    @default(false)
  agentId                   Int?
  agent                     Agent?                     @relation(fields: [agentId], references: [id])
  LSQ                       LSQ?
  OMRMigrate                OMRMigrate[]
  NonScholarshipApplication NonScholarshipApplication?
}

model ParentInfo {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  fullname      String?
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  candidateId   String    @unique
  email         String?
  phone         String?
  phonecode     String?
  emailverified DateTime?
  phoneverified DateTime?
}

model PlusTwoInfo {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @unique
  state       State?    @relation(fields: [stateId], references: [id])
  stateId     Int?
  otherState  String?
}

model LSQ {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String    @unique
  relatedId   String?

  createdAt DateTime @default(now())
}

model Utm {
  id           Int       @id @default(autoincrement())
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  candidateId  String    @unique
  utm_source   String?
  utm_medium   String?
  utm_campaign String?

  createdAt DateTime @default(now())
}

model Entrance {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  name               String
  code               String               @unique
  description        String               @unique
  Exam               Exam[]
  ExamCity           ExamCity[]
  EntranceProgrammes EntranceProgrammes[]
}

enum ExamStatus {
  CLOSED
  APPLY
  ENDAPPLY
  ENDREG
  PAUSE
}

model Exam {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  entrance        Entrance          @relation(fields: [entranceId], references: [id])
  entranceId      String
  description     String
  status          ExamStatus        @default(PAUSE)
  phaseno         Int               @default(1)
  phaseenddate    DateTime?
  slotstatus      Boolean           @default(false)
  rankpublish     Boolean           @default(false)
  ExamApplication ExamApplication[]
  Registration    Registration[]
  RankImport      RankImport[]
}

enum ExamApplicationStatus {
  PENDING
  APPLIED
  REGISTERED
  SLOT
  ADMIT
  RANK
}

enum ExamApplicationType {
  ONLINE
  OMR
  AGENT
}

model ExamApplication {
  id                      String                   @id @default(cuid())
  reference               String
  exam                    Exam                     @relation(fields: [examId], references: [id])
  examId                  String
  candidate               Candidate                @relation(fields: [candidateId], references: [id])
  candidateId             String
  status                  ExamApplicationStatus    @default(PENDING)
  type                    ExamApplicationType      @default(ONLINE)
  Registration            Registration[]
  ExamApplicationProgress ExamApplicationProgress?
  EntrancePayments        EntrancePayments[]
  ApplicationProgrammes   ApplicationProgrammes[]
  ApplicationJEE          ApplicationJEE?
  ApplicationCities       ApplicationCities[]
  createdAt               DateTime                 @default(now())
  OMRMigrate              OMRMigrate[]

  @@unique([examId, candidateId])
}

model ExamApplicationProgress {
  examapplication   ExamApplication @relation(fields: [examapplicationId], references: [id])
  examapplicationId String          @unique
  current           Int             @default(1)
}

model Registration {
  id                Int                 @id @default(autoincrement())
  exam              Exam                @relation(fields: [examId], references: [id])
  examId            String
  examapplication   ExamApplication     @relation(fields: [examapplicationId], references: [id])
  examapplicationId String
  registrationNo    Int                 @unique
  type              ExamApplicationType @default(ONLINE)
  centersyncstatus  Boolean             @default(false)
  centersynccomment String?
  createdAt         DateTime            @default(now())
  Slot              Slot[]
  AdmitCard         AdmitCard[]
  SlotMailStatus    SlotMailStatus?
  Rank              Rank[]
  Reattempt         Reattempt[]

  @@unique([examId, examapplicationId])
  @@unique([examId, registrationNo])
}

model Reattempt {
  id             Int          @id @default(autoincrement())
  registration   Registration @relation(fields: [registrationNo], references: [registrationNo])
  registrationNo Int

  createdAt DateTime @default(now())

  @@unique([registrationNo])
}

model SlotMailStatus {
  id             Int          @id @default(autoincrement())
  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int          @unique
}

enum ExamCenterMode {
  SCHEDULE
  REATTEMPT
}

model Slot {
  id               Int            @id @default(autoincrement())
  registration     Registration   @relation(fields: [registrationNo], references: [registrationNo])
  registrationNo   Int
  phaseno          Int            @default(1)
  examMode         ExamCenterMode
  examDate         DateTime
  examTime         String
  selectedCityCode String
  createdAt        DateTime       @default(now())

  @@unique([registrationNo, phaseno])
}

model OMRMigrate {
  id                Int              @id @default(autoincrement())
  registrationNo    Int
  fullname          String?
  gender            String?
  dob               DateTime?
  state             Int?
  phone             String?
  phonecode         String?          @default("+91")
  category          String?
  examcity1         Int?
  examcity2         Int?
  examcity3         Int?
  photo             Bytes?
  sign              Bytes?
  candidate         Candidate?       @relation(fields: [candidateId], references: [id])
  candidateId       String?
  examapplication   ExamApplication? @relation(fields: [examapplicationId], references: [id])
  examapplicationId String?
  regDate           DateTime?
  comment           String?
  createdAt         DateTime         @default(now())

  @@unique([registrationNo])
}

model AdmitCard {
  id              Int            @id @default(autoincrement())
  registration    Registration   @relation(fields: [registrationNo], references: [registrationNo])
  registrationNo  Int
  phaseno         Int            @default(1)
  examMode        ExamCenterMode
  locationName    String
  examDate        DateTime // Updated to DateTime type
  examTime        String
  locationAddress String
  pincode         String
  qrcode          String?
  phoneNumber     String?
  createdAt       DateTime       @default(now())

  @@unique([registrationNo, phaseno])
}

model Rank {
  id             Int          @id @default(autoincrement())
  registration   Registration @relation(fields: [registrationNo], references: [registrationNo])
  registrationNo Int
  phaseno        Int          @default(1)
  percentile     Float
  createdAt      DateTime     @default(now())

  @@unique([registrationNo, phaseno])
}

enum RankImportStatus {
  STARTED
  FAILED
  SUCCESS
}

model RankImport {
  id      Int              @id @default(autoincrement())
  exam    Exam             @relation(fields: [examId], references: [id])
  examId  String
  phaseno Int
  status  RankImportStatus @default(STARTED)

  @@unique([examId, phaseno])
}

enum PaymentStatus {
  STARTED
  FAILED
  SUCCESS
}

enum ExamPaymentType {
  ONLINE
  AGENT
}

model EntrancePayments {
  id                String          @id @default(cuid())
  txnid             String          @unique @default(cuid())
  reference         String
  candidate         Candidate       @relation(fields: [candidateId], references: [id])
  candidateId       String
  examapplication   ExamApplication @relation(fields: [examapplicationId], references: [id])
  examapplicationId String
  description       String?
  status            PaymentStatus   @default(STARTED)
  type              ExamPaymentType @default(ONLINE)
  reattempt         Boolean         @default(false)
  amount            Decimal
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model EmailOtp {
  id        Int      @id @default(autoincrement())
  email     String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model NumberOtp {
  id        Int      @id @default(autoincrement())
  number    String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ExamCity {
  id                Int                 @id @default(autoincrement())
  entrance          Entrance            @relation(fields: [entranceId], references: [id])
  entranceId        String
  city              City                @relation(fields: [cityId], references: [id])
  cityId            Int
  createdAt         DateTime            @default(now())
  ApplicationCities ApplicationCities[]

  @@unique([entranceId, cityId])
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  Branch    Branch[]
}

model Branch {
  id         Int          @id @default(autoincrement())
  course     Course       @relation(fields: [courseId], references: [id])
  courseId   Int
  name       String       @unique
  code       String       @unique
  createdAt  DateTime     @default(now())
  Programmes Programmes[]
}

model Campus {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  code       String       @unique
  createdAt  DateTime     @default(now())
  Programmes Programmes[]
}

model Programmes {
  id                          Int                           @id @default(autoincrement())
  branch                      Branch                        @relation(fields: [branchId], references: [id])
  branchId                    Int
  campus                      Campus                        @relation(fields: [campusId], references: [id])
  campusId                    Int
  name                        String                        @unique
  code                        String                        @unique
  createdAt                   DateTime                      @default(now())
  EntranceProgrammes          EntranceProgrammes[]
  ApplicationProgrammes       ApplicationProgrammes[]
  NonSchApplicationProgrammes NonSchApplicationProgrammes[]

  @@unique([branchId, campusId])
}

model EntranceProgrammes {
  id          Int        @id @default(autoincrement())
  entrance    Entrance   @relation(fields: [entranceId], references: [id])
  entranceId  String
  programme   Programmes @relation(fields: [programmeId], references: [id])
  programmeId Int
  createdAt   DateTime   @default(now())

  @@unique([entranceId, programmeId])
}

model ApplicationProgrammes {
  id                Int             @id @default(autoincrement())
  examapplication   ExamApplication @relation(fields: [examapplicationId], references: [id])
  examapplicationId String
  programme         Programmes      @relation(fields: [programmeId], references: [id])
  programmeId       Int
  createdAt         DateTime        @default(now())

  @@unique([examapplicationId, programmeId])
}

model ApplicationJEE {
  id                Int             @id @default(autoincrement())
  examapplication   ExamApplication @relation(fields: [examapplicationId], references: [id])
  examapplicationId String          @unique
  jee               Boolean         @default(false)
  createdAt         DateTime        @default(now())
}

model ApplicationCities {
  id                Int             @id @default(autoincrement())
  examapplication   ExamApplication @relation(fields: [examapplicationId], references: [id])
  examapplicationId String
  examcity          ExamCity        @relation(fields: [examcityId], references: [id])
  examcityId        Int
  createdAt         DateTime        @default(now())

  @@unique([examapplicationId, examcityId])
}

model AdminUser {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  UserRole  UserRole[]
}

model Role {
  roleId         Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  UserRole       UserRole[]
  RolePermission RolePermission[]
}

model Permission {
  permissionId   Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  RolePermission RolePermission[]
}

model UserRole {
  userId Int
  roleId Int
  user   AdminUser @relation(fields: [userId], references: [id])
  role   Role      @relation(fields: [roleId], references: [roleId])

  @@id([userId, roleId]) // Composite primary key
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [roleId])
  permission   Permission @relation(fields: [permissionId], references: [permissionId])

  @@id([roleId, permissionId]) // Composite primary key
}

model Products {
  id     Int     @id @default(autoincrement())
  code   String  @unique
  name   String  @unique
  amount Decimal
}

model Referer {
  id  Int    @id @default(autoincrement())
  url String
}

model Agent {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  email    String  @unique
  phone    String? @unique
  username String  @unique
  password String
  amount   Decimal @default(0)

  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  Candidate Candidate[]
}

model Vendor {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

enum JeeStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

model Jee {
  id             Int              @id @default(autoincrement())
  description    String           @unique
  status         JeeStatus        @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JEEApplication JEEApplication[]
}

enum JEEApplicationStatus {
  PENDING
  REGISTERED
}

model JEEApplication {
  id          String               @id @default(cuid())
  reference   String
  candidate   Candidate            @relation(fields: [candidateId], references: [id])
  candidateId String
  jee         Jee                  @relation(fields: [jeeId], references: [id])
  jeeId       Int
  status      JEEApplicationStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  JEEPayments JEEPayments[]

  @@unique([jeeId, candidateId])
}

model JEEPayments {
  id               String         @id @default(cuid())
  txnid            String         @unique @default(cuid())
  reference        String
  candidate        Candidate      @relation(fields: [candidateId], references: [id])
  candidateId      String
  jeeapplication   JEEApplication @relation(fields: [jeeapplicationId], references: [id])
  jeeapplicationId String
  description      String?
  status           PaymentStatus  @default(STARTED)
  amount           Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counsellor {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NonScholarshipIntakeStatus {
  PAUSE
  APPLY
  CLOSE
}

model NonScholarship {
  id          String                     @id @default(cuid())
  name        String
  description String
  status      NonScholarshipIntakeStatus @default(PAUSE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NonScholarshipApplication NonScholarshipApplication[]
}

enum NonScholarshipApplicationStatus {
  PENDING
  APPLIED
}

model NonScholarshipApplication {
  id               String                          @id @default(cuid())
  candidate        Candidate                       @relation(fields: [candidateId], references: [id])
  candidateId      String                          @unique
  nonscholarship   NonScholarship                  @relation(fields: [nonscholarshipId], references: [id])
  nonscholarshipId String
  reference        String
  status           NonScholarshipApplicationStatus @default(PENDING)

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  NonSchApplicationProgrammes NonSchApplicationProgrammes[]

  @@unique([candidateId, nonscholarshipId])
}

model NonSchApplicationProgrammes {
  id                          Int                       @id @default(autoincrement())
  nonscholarshipapplication   NonScholarshipApplication @relation(fields: [nonscholarshipapplicationId], references: [id])
  nonscholarshipapplicationId String
  programmes                  Programmes                @relation(fields: [programmesId], references: [id])
  programmesId                Int
  order                       Int
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt

  @@unique([nonscholarshipapplicationId, programmesId])
}

model TransactionLog {
  id    String @id @default(cuid())
  txnid String @unique
  log   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
